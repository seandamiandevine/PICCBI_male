self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$time_c      = ifelse(self$variable=='s1selfjudge',-.5,.5)
self_concept_mod = glmer(resp ~ condition_c*stim_type_c*time_c + (1|prolID), data=self, family='binomial')
summary(self_concept_mod)
self
self
## Self-concept ----
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1selfjudge','s2selfjudge')],
id.vars=c('prolID','stim_type','condition'))
self
self$resp = ifelse(self$value==65, 0, 1)
self
View(choice)
#### logistic ordinal regression ------
choice$s1selfjudge
as.numeric(choice$s1selfjudge!=65)
#### logistic ordinal regression ------
s1 = as.numeric(choice$s1selfjudge!=65)
s2 = as.numeric(choice$s2selfjudge!=65)
choice$selfjudge_diff = s1-s2
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self
self$value = as.factor(self$value)
levels(self$value)
cat.mord0 = MASS::polr(diff_f ~ 1, data = self, Hess = T)
cat.mord0 = MASS::polr(value ~ 1, data = self, Hess = T)
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self$value = as.factor(self$value)
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$stim_type_c
cat.mord0 = MASS::polr(value ~ 1, data = self, Hess = T)
cat.mord1 = MASS::polr(value ~ condition_c, data = self, Hess = T)
cat.mord2 = MASS::polr(value ~ condition_c + stim_type_c, data = self, Hess = T)
cat.mord3 = MASS::polr(value ~ condition_c * stim_type_c, data = self, Hess = T)
cat.mord1.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cat.mord0 = MASS::polr(value ~ 1, data = self, Hess = T)
cat.mord1 = MASS::polr(value ~ condition_c, data = self, Hess = T)
cat.mord2 = MASS::polr(value ~ condition_c + stim_type_c, data = self, Hess = T)
cat.mord3 = MASS::polr(value ~ condition_c * stim_type_c, data = self, Hess = T)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord1.pvals)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord3.pvals)
mod_comp = anova(cat.mord0, cat.mord1, cat.mord2, cat.mord3)
mod_comp
confint(cat.mord3)
summary(cat.mord3)
sjPlot::tab_model(cat.mord3)
sjPlot::tab_model(cat.mord3, transform = NULL)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cat.mord3.pvals
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord3))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord3.pvals)
1.343256e-02
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1selfjudge','s2selfjudge')],
id.vars=c('prolID','stim_type','condition'))
self$resp = ifelse(self$value==65, 0, 1)
mself  = tapply(self$resp, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$resp, list(self$variable, self$condition, self$stim_type), se)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements')
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
b = barplot(mself[,,'TM'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Muscular)',
names.arg = c('Stable','Changing'),
main='Thin/Muscular Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
## Self judgement ----
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1self','s2self')],
id.vars=c('prolID','stim_type','condition'))
mself  = tapply(self$value, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$value, list(self$variable, self$condition, self$stim_type), se)
# Thin/Overweight
pdf('figs/self_judgement_TF.pdf', 6, 6)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
dev.off()
# Thin/Muscular
pdf('figs/self_judgement_TM.pdf', 6, 6)
b = barplot(mself[,,'TM'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Muscular Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
arrows(b, mself[,,'TM']-seself[,,'TM'],b, mself[,,'TM']+seself[,,'TM'], length=0)
dev.off()
### Model ----
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$time_c      = ifelse(self$variable=='s1self',-.5,.5)
self_judge_mod = lmer(value ~ condition_c*stim_type_c*time_c + (1|prolID), data=self)
summary(self_judge_mod)
sjPlot::tab_model(self_judge_mod, transform = NULL, file='out/self_judge_mod.html')
### Individual differences ----
conds = tapply(dat$condition, dat$prolID, function(x) x[1])
#### TF ----
tmp   = ranef(submod1)$prolID
r   = tmp$trial_c0[rownames(tmp) %in% names(conds[conds==1])]
tmp   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp$value, list(tmp$prolID, tmp$variable), mean, na.rm=T)
diff  = mself[,2]  - mself[,1]
pdf('figs/self_judgement_ind_diff_TF.pdf', 6, 6)
par(mar=c(5.1, 6.1, 4.1, 2.1))
plot(r, diff, pch=3, col=scales::alpha('black', 0.25),
xlab='', xaxt='n',
ylab='', yaxt='n',
main='Thin/Overweight\nChanging Prevalence')
axis(1, at=c(min(r), 0, max(r)),
labels = c('Reverse Effect', 'No Effect', 'Strong Effect'),
cex.axis=0.7, las=1)
axis(2, at=c(min(diff), 0, max(diff)),
labels = c('Thinner', 'Same', 'Bigger'),
cex.axis=0.7, las=2)
title(ylab="Judgement at End", line=4, cex.lab=1)
abline(lm(diff~r), col='red', lwd=2)
r_test = cor.test(r, diff)
legend('topright', bty='n', paste0('r = ',round(r_test$estimate,2), '\np = ',round(r_test$p.value,2)))
dev.off()
#### TM ----
tmp   = ranef(submod2)$prolID
r   = tmp$trial_c0[rownames(tmp) %in% names(conds[conds==1])]
tmp   = self[self$stim_type=='TM' & self$condition==1,]
mself = tapply(tmp$value, list(tmp$prolID, tmp$variable), mean, na.rm=T)
diff  = mself[,2]  - mself[,1]
pdf('figs/self_judgement_ind_diff_TM.pdf', 6, 6)
par(mar=c(5.1, 6.1, 4.1, 2.1))
plot(r, diff, pch=3, col=scales::alpha('black', 0.25),
xlab='', xaxt='n',
ylab='', yaxt='n',
main='Thin/Muscular\nChanging Prevalence')
axis(1, at=c(min(r), 0, max(r)),
labels = c('Strong Effect', 'No Effect', 'Reverse Effect'),
cex.axis=0.7, las=1)
axis(2, at=c(min(diff), 0, max(diff)),
labels = c('Thinner', 'Same', 'Bigger'),
cex.axis=0.7, las=2)
title(ylab="Judgement at End", line=4, cex.lab=1)
abline(lm(diff~r), col='red', lwd=2)
r_test = cor.test(r, diff)
legend('topright', bty='n', paste0('r = ',round(r_test$estimate,2), '\np = ',round(r_test$p.value,2)))
dev.off()
## Self-concept ----
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1selfjudge','s2selfjudge')],
id.vars=c('prolID','stim_type','condition'))
self$resp = ifelse(self$value==65, 0, 1)
mself  = tapply(self$resp, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$resp, list(self$variable, self$condition, self$stim_type), se)
# Thin/Overweight
pdf('figs/self_concept_TF.pdf', 6, 6)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
dev.off()
# Thin/Muscular
pdf('figs/self_concept_TM.pdf', 6, 6)
b = barplot(mself[,,'TM'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Muscular)',
names.arg = c('Stable','Changing'),
main='Thin/Muscular Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task')))
arrows(b, mself[,,'TM']-seself[,,'TM'],b, mself[,,'TM']+seself[,,'TM'], length=0)
dev.off()
### Model ----
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$time_c      = ifelse(self$variable=='s1selfjudge',-.5,.5)
self_concept_mod = glmer(resp ~ condition_c*stim_type_c*time_c + (1|prolID), data=self, family='binomial')
summary(self_concept_mod)
sjPlot::tab_model(self_concept_mod, transform = NULL, file='out/self_concept_mod.html')
#### logistic ordinal regression ------
s1 = as.numeric(choice$s1selfjudge!=65)
s2 = as.numeric(choice$s2selfjudge!=65)
choice$selfjudge_diff = s1-s2
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self$value = as.factor(self$value)
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
cat.mord0 = MASS::polr(value ~ 1, data = self, Hess = T)
cat.mord1 = MASS::polr(value ~ condition_c, data = self, Hess = T)
cat.mord2 = MASS::polr(value ~ condition_c + stim_type_c, data = self, Hess = T)
cat.mord3 = MASS::polr(value ~ condition_c * stim_type_c, data = self, Hess = T)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord3))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord3.pvals)
confint(cat.mord3)
mod_comp = anova(cat.mord0, cat.mord1, cat.mord2, cat.mord3)
sjPlot::tab_model(cat.mord3, transform = NULL)
### Individual differences ----
conds = tapply(dat$condition, dat$prolID, function(x) x[1])
#### TF ----
tmp1 = ranef(submod1)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=2))
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
# Self-judgements ---------------------------------------------------------
## Self judgement ----
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1self','s2self')],
id.vars=c('prolID','stim_type','condition'))
mself  = tapply(self$value, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$value, list(self$variable, self$condition, self$stim_type), se)
# Thin/Overweight
pdf('figs/self_judgement_TF.pdf', 6, 6)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
dev.off()
# Thin/Muscular
pdf('figs/self_judgement_TM.pdf', 6, 6)
b = barplot(mself[,,'TM'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='Size of Chosen Body',
names.arg = c('Stable','Changing'),
main='Thin/Muscular Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
arrows(b, mself[,,'TM']-seself[,,'TM'],b, mself[,,'TM']+seself[,,'TM'], length=0)
dev.off()
### Model ----
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$time_c      = ifelse(self$variable=='s1self',-.5,.5)
self_judge_mod = lmer(value ~ condition_c*stim_type_c*time_c + (1|prolID), data=self)
summary(self_judge_mod)
sjPlot::tab_model(self_judge_mod, transform = NULL, file='out/self_judge_mod.html')
### Individual differences ----
conds = tapply(dat$condition, dat$prolID, function(x) x[1])
#### TF ----
tmp   = ranef(submod1)$prolID
r   = tmp$trial_c0[rownames(tmp) %in% names(conds[conds==1])]
tmp   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp$value, list(tmp$prolID, tmp$variable), mean, na.rm=T)
diff  = mself[,2]  - mself[,1]
pdf('figs/self_judgement_ind_diff_TF.pdf', 6, 6)
par(mar=c(5.1, 6.1, 4.1, 2.1))
plot(r, diff, pch=3, col=scales::alpha('black', 0.25),
xlab='', xaxt='n',
ylab='', yaxt='n',
main='Thin/Overweight\nChanging Prevalence')
axis(1, at=c(min(r), 0, max(r)),
labels = c('Reverse Effect', 'No Effect', 'Strong Effect'),
cex.axis=0.7, las=1)
axis(2, at=c(min(diff), 0, max(diff)),
labels = c('Thinner', 'Same', 'Bigger'),
cex.axis=0.7, las=2)
title(ylab="Judgement at End", line=4, cex.lab=1)
abline(lm(diff~r), col='red', lwd=2)
r_test = cor.test(r, diff)
legend('topright', bty='n', paste0('r = ',round(r_test$estimate,2), '\np = ',round(r_test$p.value,2)))
dev.off()
#### TM ----
tmp   = ranef(submod2)$prolID
r   = tmp$trial_c0[rownames(tmp) %in% names(conds[conds==1])]
tmp   = self[self$stim_type=='TM' & self$condition==1,]
mself = tapply(tmp$value, list(tmp$prolID, tmp$variable), mean, na.rm=T)
diff  = mself[,2]  - mself[,1]
pdf('figs/self_judgement_ind_diff_TM.pdf', 6, 6)
par(mar=c(5.1, 6.1, 4.1, 2.1))
plot(r, diff, pch=3, col=scales::alpha('black', 0.25),
xlab='', xaxt='n',
ylab='', yaxt='n',
main='Thin/Muscular\nChanging Prevalence')
axis(1, at=c(min(r), 0, max(r)),
labels = c('Strong Effect', 'No Effect', 'Reverse Effect'),
cex.axis=0.7, las=1)
axis(2, at=c(min(diff), 0, max(diff)),
labels = c('Thinner', 'Same', 'Bigger'),
cex.axis=0.7, las=2)
title(ylab="Judgement at End", line=4, cex.lab=1)
abline(lm(diff~r), col='red', lwd=2)
r_test = cor.test(r, diff)
legend('topright', bty='n', paste0('r = ',round(r_test$estimate,2), '\np = ',round(r_test$p.value,2)))
dev.off()
## Self-concept ----
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1selfjudge','s2selfjudge')],
id.vars=c('prolID','stim_type','condition'))
self$resp = ifelse(self$value==65, 0, 1)
mself  = tapply(self$resp, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$resp, list(self$variable, self$condition, self$stim_type), se)
# Thin/Overweight
pdf('figs/self_concept_TF.pdf', 6, 6)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
dev.off()
# Thin/Muscular
pdf('figs/self_concept_TM.pdf', 6, 6)
b = barplot(mself[,,'TM'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Muscular)',
names.arg = c('Stable','Changing'),
main='Thin/Muscular Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
arrows(b, mself[,,'TM']-seself[,,'TM'],b, mself[,,'TM']+seself[,,'TM'], length=0)
dev.off()
### Model ----
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
self$time_c      = ifelse(self$variable=='s1selfjudge',-.5,.5)
self_concept_mod = glmer(resp ~ condition_c*stim_type_c*time_c + (1|prolID), data=self, family='binomial')
summary(self_concept_mod)
sjPlot::tab_model(self_concept_mod, transform = NULL, file='out/self_concept_mod.html')
#### logistic ordinal regression ------
s1 = as.numeric(choice$s1selfjudge!=65)
s2 = as.numeric(choice$s2selfjudge!=65)
choice$selfjudge_diff = s1-s2
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self$value = as.factor(self$value)
self$condition_c = self$condition-.5
self$stim_type_c = ifelse(self$stim_type=='TF', -.5,.5)
cat.mord0 = MASS::polr(value ~ 1, data = self, Hess = T)
cat.mord1 = MASS::polr(value ~ condition_c, data = self, Hess = T)
cat.mord2 = MASS::polr(value ~ condition_c + stim_type_c, data = self, Hess = T)
cat.mord3 = MASS::polr(value ~ condition_c * stim_type_c, data = self, Hess = T)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord3))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord3.pvals)
confint(cat.mord3)
mod_comp = anova(cat.mord0, cat.mord1, cat.mord2, cat.mord3)
sjPlot::tab_model(cat.mord3, transform = NULL)
### Individual differences ----
conds = tapply(dat$condition, dat$prolID, function(x) x[1])
#### TF ----
tmp1 = ranef(submod1)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
#### TM ----
tmp1 = ranef(submod2)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TM' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
diff  = mself[,1]  - mself[,2]
self = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','s1selfjudge','s2selfjudge')],
id.vars=c('prolID','stim_type','condition'))
self$resp = ifelse(self$value==65, 0, 1)
mself  = tapply(self$resp, list(self$variable, self$condition, self$stim_type), mean)
seself = tapply(self$resp, list(self$variable, self$condition, self$stim_type), se)
b = barplot(mself[,,'TF'], beside=T, ylim=c(0,1),
xlab='Prevalence Condition',
ylab='P(Judge Chosen Body Overweight)',
names.arg = c('Stable','Changing'),
main='Thin/Overweight Judgements',
legend.text = T,
args.legend = list(bty='n', legend=c('Start of Task', 'End of Task'), cex=1.5))
arrows(b, mself[,,'TF']-seself[,,'TF'],b, mself[,,'TF']+seself[,,'TF'], length=0)
self2 = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self2 = reshape2::melt(choice[choice$trial==1,c('prolID','stim_type','condition','selfjudge_diff')],
id.vars=c('prolID','stim_type','condition'))
self2$value = as.factor(self2$value)
self2$condition_c = self2$condition-.5
self2$stim_type_c = ifelse(self2$stim_type=='TF', -.5,.5)
cat.mord0 = MASS::polr(value ~ 1, data = self2, Hess = T)
cat.mord1 = MASS::polr(value ~ condition_c, data = self2, Hess = T)
cat.mord2 = MASS::polr(value ~ condition_c + stim_type_c, data = self2, Hess = T)
cat.mord3 = MASS::polr(value ~ condition_c * stim_type_c, data = self2, Hess = T)
cat.mord3.pvals = pnorm(abs(coef(summary(cat.mord3))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord3)), "p" = cat.mord3.pvals)
confint(cat.mord3)
mod_comp = anova(cat.mord0, cat.mord1, cat.mord2, cat.mord3)
sjPlot::tab_model(cat.mord3, transform = NULL)
conds = tapply(dat$condition, dat$prolID, function(x) x[1])
#### TF ----
tmp1 = ranef(submod1)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
diff  = mself[,1]  - mself[,2]
tmp1$diff = diff
mr     = tapply(tmp1$trial_c0, tmp1$diff, mean)
ser    = tapply(tmp1$trial_c0, tmp1$diff, se)
ylimit = range(pretty(c(mr-ser, mr+ser)))
b = barplot(mr, ylim=ylimit,ylab='', yaxt='n',
main='Thin/Overweight\nChanging Prevalence Condition',
names.arg = c('Judge Thin at Start\nJudge Overweight at End',
'No Change',
'Judge Overweight at Start\nJudge Thin at End'),
cex.names = .75)
axis(2, at=c(min(mr), 0, max(mr)),
labels = c('Reverse Effect', 'No Effect', 'Strong Effect'),
cex.axis=0.7, las=1)
arrows(b, mr-ser, b, mr+ser, length=0)
abline(h=0)
tmp1$diff_f = factor(tmp1$diff, levels = c(-1,0,1))
cat.mord0 = MASS::polr(diff_f ~ 1, data = tmp1, Hess = T)
cat.mord1 = MASS::polr(diff_f ~ trial_c0, data = tmp1, Hess = T)
cat.mord1.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord1)), "p" = cat.mord1.pvals)
4.311197e-01
#### TM ----
tmp1 = ranef(submod2)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TM' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
diff  = mself[,1]  - mself[,2]
tmp1$diff = diff
mr     = tapply(tmp1$trial_c0, tmp1$diff, mean)
ser    = tapply(tmp1$trial_c0, tmp1$diff, se)
ylimit = range(pretty(c(mr-ser, mr+ser)))
b = barplot(mr, ylim=ylimit,ylab='', yaxt='n',
main='Thin/Muscular\nChanging Prevalence Condition',
names.arg = c('Judge Thin at Start\nJudge Muscular at End',
'No Change',
'Judge Muscular at Start\nJudge Thin at End'),
cex.names = .75)
axis(2, at=c(min(mr), 0, max(mr)),
labels = c('Strong Effect', 'No Effect', 'Reverse Effect'),
cex.axis=0.7, las=1)
arrows(b, mr-ser, b, mr+ser, length=0)
abline(h=0)
tmp1$diff_f = factor(tmp1$diff, levels = c(-1,0,1))
cat.mord0 = MASS::polr(diff_f ~ 1, data = tmp1, Hess = T)
cat.mord1 = MASS::polr(diff_f ~ trial_c0, data = tmp1, Hess = T)
cat.mord1.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord1)), "p" = cat.mord1.pvals)
confint(cat.mord1)
mod_comp = anova(cat.mord0, cat.mord1)
legend('bottomleft', bty='n', legend=paste0('p = ',round(mod_comp$`Pr(Chi)`[2],2)))
anova(cat.mord0, cat.mord1)
cbind(coef(summary(cat.mord1)), "p" = cat.mord1.pvals)
6.128904e-02
sjPlot::tab_model(cat.mord1)
sjPlot::tab_model(cat.mord1, transform = NULL)
confint(cat.mord1)
mod_comp = anova(cat.mord0, cat.mord1)
anova(cat.mord0, cat.mord1)
tmp1$diff_f = factor(tmp1$diff, levels = c(-1,0,1))
cat.mord0 = MASS::polr(diff_f ~ 1, data = tmp1, Hess = T)
cat.mord1 = MASS::polr(diff_f ~ trial_c0, data = tmp1, Hess = T)
cat.mord1.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord1)), "p" = cat.mord1.pvals)
#### TF ----
tmp1 = ranef(submod1)$prolID
tmp1 = tmp1[rownames(tmp1) %in% names(conds[conds==1]),]
tmp2   = self[self$stim_type=='TF' & self$condition==1,]
mself = tapply(tmp2$resp, list(tmp2$prolID, tmp2$variable), mean, na.rm=T)
diff  = mself[,1]  - mself[,2]
tmp1$diff = diff
mr     = tapply(tmp1$trial_c0, tmp1$diff, mean)
ser    = tapply(tmp1$trial_c0, tmp1$diff, se)
ylimit = range(pretty(c(mr-ser, mr+ser)))
tmp1$diff_f = factor(tmp1$diff, levels = c(-1,0,1))
cat.mord0 = MASS::polr(diff_f ~ 1, data = tmp1, Hess = T)
cat.mord1 = MASS::polr(diff_f ~ trial_c0, data = tmp1, Hess = T)
cat.mord1.pvals = pnorm(abs(coef(summary(cat.mord1))[, "t value"]),lower.tail = FALSE)*2
cbind(coef(summary(cat.mord1)), "p" = cat.mord1.pvals)
confint(cat.mord1)
mod_comp = anova(cat.mord0, cat.mord1)
sjPlot::tab_model(cat.mord1)
sjPlot::tab_model(cat.mord1, transform = NULL)
